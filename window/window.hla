//based off of hide template
program Window;
#if(@defined(debug))
#includeonce("stdlib.hhf")
#endif
#includeonce("w.hhf")
#includeonce("excepts.hhf")

type
	//Message and dispatch table related definitions:
	MsgProc_t:					procedure(hwnd:dword; wParam:dword; lParam:dword);
	
	MsgProcPtr_t:
		record
			MessageValue		:dword;
			MessageHndlr		:MsgProc_t;
		endrecord;
		
	engineStates: 
		enum{
			e_Off,			//0
			e_Game,			//1
			e_GameEditor,	//2
			e_UIEditor,		//3
			e_Loading,		//4
			e_Closing,		//5
			e_Opening,		//6
			e_LoadingSave	//7
		};
	//Engine logic handler
	EngineLogicProcedure_t:		procedure;
	
	LogicProcPtr_t:
		record
			LogicState			:engineStates;
			LogicHandler		:EngineLogicProcedure_t;
		endrecord;
endtype;


static
	align(4);
	hinst			:dword;						//instance handle
	hwnd			:dword;						//main window handle
	
	wc				:w.WNDCLASSEX;				//window class structure
	msg				:w.MSG;						//message record
	
	Accelerators_A	:w.ACCEL[3];				//An Array of ACCEL structures
	haccel			:dword;						//the handle to the Accelerator Table
	
	engineHandler	:LogicProcPtr_t; @nostorage;
		LogicProcPtr_t
 			LogicProcPtr_t:[e_Off,			&Logic_Off],
			LogicProcPtr_t:[e_Game, 		&Logic_Game],
			LogicProcPtr_t:[e_GameEditor, 	&Logic_GameEditor],
			LogicProcPtr_t:[e_UIEditor, 	&Logic_UIEditor],
			LogicProcPtr_t:[e_Loading, 		&Logic_Loading],
			LogicProcPtr_t:[e_Closing, 		&Logic_Closing],
			LogicProcPtr_t:[e_Opening, 		&Logic_Opening],
			LogicProcPtr_t:[e_LoadingSave, 	&Logic_LoadingSave];
	
	currentState	:LogicProcPtr_t;
endstatic;


readonly	//message tables. change this section to static if you wish to change pointers during run-time

	ClassName			:string:="MAINCLASS";		//you may substitude your own name for "MAINCLASS"
	AppName				:string:="HLA_Window by the N00b";			//you may substitude your own name for "TEMPAPP"
	
	//main window message table
	//used to associate windows messages with the handler functions for them
	message_table	:MsgProcPtr_t; @nostorage;
		MsgProcPtr_t	
			MsgProcPtr_t:[w.WM_COMMAND,		&Msg_Command], 
			MsgProcPtr_t:[w.WM_DESTROY,		&Msg_Destroy], 
			MsgProcPtr_t:[w.WM_CLOSE,		&Msg_Close], 
			MsgProcPtr_t:[w.WM_CREATE,		&Msg_Create],
			//add more messages here
			MsgProcPtr_t:[ 0, NULL ];	//This marks the end of the list.

	//WM_COMMAND message table, wparam items go here
	command_table	:MsgProcPtr_t; @nostorage;
		MsgProcPtr_t
			//add more commands here
			MsgProcPtr_t:[1,				&Logic_Game], 		//Ctrl+g
			MsgProcPtr_t:[2,				&Logic_GameEditor],	//Ctrl+e
			MsgProcPtr_t:[3,				&Logic_UIEditor],	//Ctrl+u
			MsgProcPtr_t:[ 0, 				NULL			];
		
endreadonly;
 
procedure Error(error_msg:string);	@nodisplay;
begin Error;
	w.MessageBox(NULL, error_msg, "ERROR", w.MB_OK | w.MB_ICONERROR);
	
	cmp(hwnd, 0);
	je _nowindow;
	w.PostQuitMessage(0);
	exit Error;
	
_nowindow:
	xor(eax, eax);

end Error;

procedure Change_GameState(e_state:engineStates);
@nodisplay;
begin Change_GameState;
	push(eax);
	push(ebx);
	push(edx);
	xor(ebx,ebx);
	xor(eax,eax);
	
	//handle Offset
	mov(e_state, al);
	mul(@size(LogicProcPtr_t), ax);
	mov(&engineHandler, edx);
	add(eax, edx); //edx contains correct offset address
	
	//handle LogicState
	mov((type uns32 (type LogicProcPtr_t [edx]).LogicState), ebx);
	mov(bl, currentState.LogicState);
	
	//handle LogicHandler
	mov((type LogicProcPtr_t [edx]).LogicHandler, ebx);
	mov(ebx, currentState.LogicHandler);
	
	pop(edx);
	pop(ebx);
	pop(eax);
end Change_GameState;


procedure Msg_Create(hwin:dword; wparam:dword; lparam:dword);
@nodisplay;
begin Msg_Create;

	mov(hwin, eax);
	mov(eax, hwnd);
	push(esi);
	
	//window creation initialization goes here
	
	//gameAccel Accelerator Ctrl+Shift+F1 [$8 | $4, $70, 1]
	mov($8, al);
	mov(al, Accelerators_A.fVirt);
	mov((type word 'g'), ax);
	mov(ax, Accelerators_A.key);
	mov(1, ax);
	mov(ax, Accelerators_A.cmd);
	#if(@defined(debug))
	stdout.put( "Accelerators_A[0].fVirt = ", Accelerators_A.fVirt, nl );
	stdout.put( "Accelerators_A[0].key = ", Accelerators_A.key, nl );
	stdout.put( "Accelerators_A[0].cmd = ", Accelerators_A.cmd, nl );
	#endif
	
	//gameEditorAccel Accelerator Ctrl+Shift+F2 [$8 | $4, $71, 2]
	mov($8, al);
	lea(ebx, Accelerators_A);
	mov(1, esi);
	intmul(5, esi);
	mov(al, [ebx+esi]); //fVirt
	mov((type word 'e'), ax);
	mov(ax, [ebx+esi+1]); //key is 1 byte into Accelerators_A
	mov(1, ax);
	mov(ax, [ebx+esi+3]); //cmd is 3 bytes into Accelerators_A
	
	//UIEditorAccel Accelerator Ctrl+Shift+F3 [$8 | $4, $72, 3]
	mov($8, al);
	mov(2, esi);
	intmul(5, esi);
	mov(al, [ebx+esi]);
	mov((type word 'u'), ax);
	mov(ax, [ebx+esi+1]); //key is 1 byte into Accelerators_A
	mov(1, ax);
	mov(ax, [ebx+esi+3]); //cmd is 3 bytes into Accelerators_A
	
	//CreateAcceleraterTable here
// 	try
	w.CreateAcceleratorTable(Accelerators_A, 3);
	mov(eax, haccel);
// 	exception(ex.ValueOutOfRange);
// 	exception(ex.ConversionError);
// 	endtry;
	
	#if(@defined(debug))
	stdout.put( "haccel = ", haccel, nl );

	#endif
	
	pop(esi);
end Msg_Create;

	 
procedure Msg_Close(hwin:dword; wparam:dword; lparam:dword);
@nodisplay;
begin Msg_Close;

	 	//user selects close button
	 	w.SendMessage(hwin, w.WM_DESTROY, 0, 0);
end Msg_Close;


procedure Msg_Destroy(hwin:dword; wparam:dword; lparam:dword);
@nodisplay;
begin Msg_Destroy;
	 	w.PostQuitMessage(NULL);
end Msg_Destroy;

procedure Msg_KeyDown(hwin:dword; wparam:dword; lparam:dword);
@nodisplay;
begin Msg_KeyDown;
end Msg_KeyDown;


procedure Msg_Command(hwin:dword; wparam:dword; lparam:dword);
@nodisplay;
begin Msg_Command;

	//move low word into ecx and hi word into edx
	//low word is control id and hi word is control type
	mov(wparam, ecx);
	mov(ecx, edx);
	movzx(cx, ecx);
	shr(16, edx);
	mov(edx, ebx);
	
	if(edx = w.BN_CLICKED || edx = 1) then
		//control or accelerator
		mov(&command_table, edx);
		mov(ecx, eax);
		#if(@defined(debug))
		stdout.put( "wparam = ", wparam, nl );
		stdout.put( "lparam = ", lparam, nl );
		stdout.put( "Low word = ", ecx, nl );
		stdout.put( "Hi word = ", ebx, nl );
		#endif
		
		forever
			mov((type MsgProcPtr_t [edx]).MessageHndlr, ecx);
			if(ecx = 0) then
				break;
				
			elseif(eax =(type MsgProcPtr_t [edx]).MessageValue) then
	
				push(hwin);
				push(wparam);
				push(lparam);
				call(ecx);
				sub(eax, eax);
				break;
			endif;
			add(@size(MsgProcPtr_t), edx);
		endfor;
		
	endif;

end Msg_Command;


procedure Logic_Off; @nodisplay; @noframe;
begin Logic_Off;
ret;
end Logic_Off;


procedure Logic_Game; @nodisplay;
begin Logic_Game;
w.MessageBox(NULL, "In Game", "Game", w.MB_OK);
end Logic_Game;


procedure Logic_GameEditor; @nodisplay;
begin Logic_GameEditor;
w.MessageBox(NULL, "In Game Editor", "GameEditor", w.MB_OK);
end Logic_GameEditor;


procedure Logic_UIEditor; @nodisplay;
begin Logic_UIEditor;
w.MessageBox(NULL, "In UI Editor", "UIEditor", w.MB_OK);
end Logic_UIEditor;


procedure Logic_Loading; @nodisplay;
begin Logic_Loading;
end Logic_Loading;


procedure Logic_Closing; @nodisplay;
begin Logic_Closing;
end Logic_Closing;


procedure Logic_Opening; @nodisplay;
begin Logic_Opening;
end Logic_Opening;


procedure Logic_LoadingSave; @nodisplay;
begin Logic_LoadingSave;
end Logic_LoadingSave;


procedure WndProc(lparam:dword; wparam:dword; umsg:uns32; hwin:dword);	@nodisplay;
//main window message handler
begin WndProc;
	mov(umsg, eax);
	mov(&message_table, edx);
	
	forever
		mov((type MsgProcPtr_t [edx]).MessageHndlr, ecx);
		if(ecx = 0) then
			w.DefWindowProc(hwin, umsg, wparam, lparam);
			exit WndProc;
		elseif(eax =(type MsgProcPtr_t [edx]).MessageValue) then
			push(hwin);
			push(wparam);
			push(lparam);
			call(ecx);
			sub(eax, eax);
			break;
		endif;
		add(@size(MsgProcPtr_t), edx);
	endfor;
end WndProc;


begin Window;
	w.GetModuleHandle(NULL);
	mov(eax, hinst);
	
	//main window created here
	//describe and register the window class
	mov(@size(w.WNDCLASSEX), wc.cbSize);
	mov(w.CS_HREDRAW | w.CS_VREDRAW, wc.style);
	mov(&WndProc, wc.lpfnWndProc);
	mov(NULL, wc.cbClsExtra);
	mov(NULL, wc.cbWndExtra);
	mov(hinst, wc.hInstance);
	mov(w.COLOR_BTNFACE+1, wc.hbrBackground);
	mov(NULL, wc.lpszMenuName);
	mov(ClassName, wc.lpszClassName);
	
	w.LoadIcon(NULL, val w.IDI_APPLICATION);
	mov(eax, wc.hIcon);
	mov(eax, wc.hIconSm);
	w.LoadCursor(NULL, val w.IDC_ARROW);
	mov(eax, wc.hCursor);
	w.RegisterClassEx(wc);
	or(eax, eax);
	jnz _registerok;
	Error("Unable to register window class");
	exit Window;
	
_registerok:
	w.CreateWindowEx(
			NULL, 					//dwExStyle
			ClassName, 				//lpClassName
			AppName, 				//lpWindowName
			w.WS_OVERLAPPEDWINDOW, 	//dwStyle
			w.CW_USEDEFAULT, 		//x
			w.CW_USEDEFAULT, 		//y
			w.CW_USEDEFAULT, 		//nWidth
			w.CW_USEDEFAULT, 		//nHeight
			NULL, 					//hWndParent
			NULL, 					//hMenu
			hinst, 					//hInstance
			NULL);					//lpParam
	cmp(eax, 0);
	jne _windowok;
	Error("Unable to create window");
	exit Window;
	
_windowok:
	
	w.ShowWindow(hwnd, w.SW_SHOWNORMAL);
	w.UpdateWindow(hwnd);

	forever
			w.GetMessage(msg, NULL, 0, 0);
			breakif(!eax);
			if(!w.TranslateAccelerator(hwnd, haccel, msg)) then
				w.TranslateMessage(msg);
				w.DispatchMessage(msg);
			endif;
	endfor;
	mov(msg.wParam, eax);
_exit:

end Window;
